- name: Check dependencies
  hosts: localhost
  gather_facts: no
  become: no
  tasks:
    - name: Verify Ansible version meets this playbook's requirements
      include: tasks/version_check.yml
      vars:
        ansible_min_version: 2.7.0
        ansible_max_version: 2.8.0
      tags: always

- name: Deploy kubernetes with ansible
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: deploy kubernetes
      shell: 'ansible-playbook -i /home/ubuntu/hosts.ini kubernetes.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: deploy_k8s
    - name: create kubeadm configuration directory
      file:
        path: '/home/ubuntu/.kube'
        state: directory
      tags: deploy_k8s
    - name: copy kubeadm config
      copy:
        remote_src: True
        src: '/home/ubuntu/artifacts/admin.conf'
        dest: '/home/ubuntu/.kube/config'
      tags: deploy_k8s

- name: Deploy cassandra with ansible
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: deploy cassandra
      shell: 'ansible-playbook -i /home/ubuntu/hosts.ini cassandra.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: deploy_cassandra

- name: Deploy elasticsearch with ansible
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: deploy elasticsearch
      shell: 'ansible-playbook -i /home/ubuntu/hosts.ini elasticsearch.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: deploy_elasticsearch

- name: Deploy minio with ansible
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: deploy minio
      shell: 'ansible-playbook -i /home/ubuntu/hosts.ini minio.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: deploy_minio

- name: Enable S3 DNS resolution
  hosts: assethost
  gather_facts: no
  become: no
  tasks:
    - name: enable resolution of S3 buckets via DNS
      copy:
        content: |
          address=/s3-eu-central-1.amazonaws.com/{{ s3_ip }}
          address=/s3.eu-central-1.amazonaws.com/{{ s3_ip }}
          address=/s3-r-w.eu-central-1.amazonaws.com/{{ s3_ip }}
        dest: /home/ubuntu/offline_delivery/dnsmasq/dnsmasq.d/s3.endpoint
      tags: prepare_s3_endpoint
      when: '"minio" not in groups'
    - name: restart DNSMASQ
      systemd:
        name: dnsmasq
        state: restarted
        daemon_reload: yes
      become: yes
      tags: prepare_s3_endpoint
      when: '"minio" not in groups'

- name: Enable LetsEncrypt DNS resolution
  hosts: assethost
  gather_facts: no
  become: no
  tasks:
    - name: enable resolution of acme servers via DNS
      copy:
        content: |
          address=/acme-staging-v02.api.letsencrypt.org/{{ acme_staging_ip }}
          address=/acme-v02.api.letsencrypt.org/{{ acme_production_ip }}
        dest: /home/ubuntu/offline_delivery/dnsmasq/dnsmasq.d/acme.endpoint
      tags: prepare_acme_dns
    - name: restart DNSMASQ
      systemd:
        name: dnsmasq
        state: restarted
        daemon_reload: yes
      become: yes
      tags: prepare_acme_dns

- name: Deploy wire-server with helm
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: ensure we can download helm charts (1 of 2)
      file:
        path: /home/ubuntu/wire-server-deploy/helm.internal.vpc
        state: absent
      tags: gather_helm_charts
      ignore_errors: yes
    - name: ensure we can download helm charts (2 of 2)
      file:
        path: /home/ubuntu/wire-server-deploy/wire
        state: absent
      tags: gather_helm_charts
      ignore_errors: yes
    - name: download helm charts
      command: 'wget -r -l 10 --quiet https://helm.internal.vpc/charts/'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: gather_helm_charts
      ignore_errors: yes
    - name: move helm charts
      command: 'mv helm.{{ fake_domain }}/charts/ ./wire'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: gather_helm_charts
    - name: clean helm charts
      shell: 'rm $(find ./wire/ -name index*)'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: gather_helm_charts
    - name: run ansible script to populate values files.
      shell: 'ansible-playbook -i /home/ubuntu/hosts.ini helm_external.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: prepare_helm_values
    - name: install cassandra-external
      command: 'helm upgrade --install cassandra-external wire/cassandra-external -f values/cassandra-external/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_helm_chart_cassandra
    - name: install elasticsearch-external
      command: 'helm upgrade --install elasticsearch-external wire/elasticsearch-external -f values/elasticsearch-external/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_helm_chart_elasticsearch
    - name: install minio-external
      command: 'helm upgrade --install minio-external wire/minio-external -f values/minio-external/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      when: '"minio" in groups and groups["minio"]'
      tags: deploy_helm_chart_minio
## FUTUREWORK: look at the cassandra, redis, and elasticsearch groups, and fill this out dynamically.
    - name: create values file for databases-ephemeral
      copy:
        content: |
          tags:
            cassandra-ephemeral: false
            elasticsearch-ephemeral: false
        dest: /home/ubuntu/wire-server-deploy/values/databases-ephemeral/values.yaml
      tags: prepare_databases_ephemeral
    - name: install databases-ephemeral
      command: 'helm upgrade --install databases-ephemeral wire/databases-ephemeral -f values/databases-ephemeral/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_databases_ephemeral
    - name: configure fake-aws
      copy:
        dest: '/home/ubuntu/wire-server-deploy/values/fake-aws/values.yaml'
        src: '/home/ubuntu/wire-server-deploy/values/fake-aws/prod-values.example.yaml'
        remote_src: yes
      tags: prepare_fake_aws
    - name: install fake-aws
      command: 'helm upgrade --install fake-aws wire/fake-aws -f values/fake-aws/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_fake_aws
    - name: create container directory for wire-server-configs
      file:
        path: /home/ubuntu/wire-server-deploy/my-wire-server
        state: directory
      tags: config_wire_server
    - name: copy wire-server configs (values)
      copy:
        remote_src: True
        src: '/home/ubuntu/wire-server-deploy/values/wire-server/prod-values.example.yaml'
        dest: '/home/ubuntu/wire-server-deploy/my-wire-server/values.yaml'
      tags: config_wire_server
    - name: copy wire-server configs (secrets)
      copy:
        remote_src: True
        src: '/home/ubuntu/wire-server-deploy/values/wire-server/prod-secrets.example.yaml'
        dest: '/home/ubuntu/wire-server-deploy/my-wire-server/secrets.yaml'
      tags: config_wire_server
    - name: change domain name
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/values.yaml'
        regexp: 'example.com'
        replace: '{{ real_domain }}'
      tags: config_wire_server
    - name: configure demo-smtp
      copy:
        dest: '/home/ubuntu/wire-server-deploy/values/demo-smtp/values.yaml'
        src: '/home/ubuntu/wire-server-deploy/values/demo-smtp/prod-values.example.yaml'
        remote_src: yes
      tags: prepare_demo_smtp
    - name: install demo-smtp
      command: 'helm upgrade --install demo-smtp wire/demo-smtp -f values/demo-smtp/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_demo_smtp
    - name: supply dns domain name to helm charts
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/values.yaml'
        regexp: 'example.com'
        replace: '{{ real_domain }}'
      tags: config_wire_server
    - name: remove teams configuration
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/values.yaml'
        regexp: '.*teamSettings:.*\n'
        replace: ''
      tags: config_wire_server
    - name: place s3 bucket name in cargohold section of values file.
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/values.yaml'
        regexp: 's3Bucket:.*\n'
        replace: 's3Bucket: {{ aws_cargohold_bucket }}\n'
      tags: config_wire_server_s3
    - name: place s3 endpoint name in cargohold section of values file.
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/values.yaml'
        regexp: 's3Endpoint:.*\n'
        replace: 's3Endpoint: https://s3.{{ aws_region }}.amazonaws.com:443\n'
      tags: config_wire_server_s3
    - name: place s3 bucket key in cargohold section of the secrets file.
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/secrets.yaml'
        after: 'cargohold:'
        before: 'galley:'
        regexp: 'awsKeyId:.*\n'
        replace: 'awsKeyId: {{ aws_cargohold_key }}\n'
      tags: config_wire_server_s3
    - name: place s3 bucket access secret in cargohold section of the secrets file.
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/secrets.yaml'
        after: 'cargohold:'
        before: 'galley:'
        regexp: 'awsSecretKey:.*\n'
        replace: 'awsSecretKey: {{ aws_cargohold_secret }}\n'
      tags: config_wire_server_s3
    - name: create a secret for restund
      command: 'bash -c "openssl rand -base64 64 | env LC_CTYPE=C tr -dc a-zA-Z0-9 | head -c 42 > my-wire-server/restund.txt"'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: rekey_restund
    - name: install docker-ce
      apt:
        name: docker-ce
      become: yes
      tags: rekey_zauth
    - name: create a secret for zauth
      command: 'bash -c "docker run --rm quay.io/wire/alpine-intermediate /dist/zauth -m gen-keypair -i 1 > my-wire-server/zauth.txt"'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      become: yes
      tags: rekey_zauth
    - name: read restund secret
      command: bash -c 'cat my-wire-server/restund.txt'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      register: restund_secret
      tags: rekey_restund
    - name: read zauth public
      command: bash -c 'cat my-wire-server/zauth.txt | sed -n "s/public. //p"'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      register: zauth_public
      tags: rekey_zauth
    - name: read zauth public
      command: bash -c 'cat my-wire-server/zauth.txt | sed -n "s/secret. //p"'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      register: zauth_private
      tags: rekey_zauth
    - name: place restund secret in wire-server secrets.yaml
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/secrets.yaml'
        before: 'awsKeyId:'
        after: 'turn:'
        regexp: '(.*)secret.*'
        replace: '\1secret: {{ restund_secret.stdout }}'
      tags: rekey_restund
    - name: place zauth public secret in wire-server secrets.yaml
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/secrets.yaml'
        before: 'turn:'
        after: 'zAuth:'
        regexp: '<public key>'
        replace: '{{ zauth_public.stdout }}'
      tags: rekey_zauth
    - name: place zauth private secret in wire-server secrets.yaml
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/secrets.yaml'
        before: 'turn:'
        after: 'zAuth:'
        regexp: '<private key>'
        replace: '{{ zauth_private.stdout }}'
      tags: rekey_zauth
    - name: place zauth public secret in wire-server secrets.yaml
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-wire-server/secrets.yaml'
        before: 'basicAuth:'
        after: 'nginz:'
        regexp: '<public key>'
        replace: '{{ zauth_public.stdout }}'
      tags: rekey_zauth
    - name: install wire-server
      command: 'helm upgrade --install wire-server wire/wire-server -f my-wire-server/values.yaml -f my-wire-server/secrets.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_helm_chart_wire_server
    - name: create container directory for ingress configs
      file:
        path: /home/ubuntu/wire-server-deploy/my-nginx-ingress
        state: directory
      tags: config_ingress
    - name: copy nginx-ingress configs (values)
      copy:
        remote_src: True
        src: '/home/ubuntu/wire-server-deploy/values/nginx-ingress-services/prod-values.example.yaml'
        dest: '/home/ubuntu/wire-server-deploy/my-nginx-ingress/values.yaml'
      tags: config_ingress
    - name: copy wire-server configs (secrets)
      copy:
        remote_src: True
        src: '/home/ubuntu/wire-server-deploy/values/nginx-ingress-services/prod-secrets.example.yaml'
        dest: '/home/ubuntu/wire-server-deploy/my-nginx-ingress/secrets.yaml'
      tags: config_ingress
    - name: change domain name
      replace:
        path: '/home/ubuntu/wire-server-deploy/my-nginx-ingress/values.yaml'
        regexp: 'example.com'
        replace: '{{ real_domain }}'
      tags: config_ingress
    - name: use cert-manager
      copy:
        dest: /home/ubuntu/wire-server-deploy/my-nginx-ingress/values-override-cert-manager.yaml
        content: |
          tls:
            useCertManager: true
          certManager:
            certmasterEmail: backend+exxon-dev@wire.com
            inTestMode: false
      tags: config_ingress
    - name: create namespace for cert-manager
      shell: |
        kubectl apply -f -
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
        stdin: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cert-manager
      tags: config_ingress
    - name: install cert-manager CRDs
      shell: |
        helm upgrade --install -n cert-manager --set 'installCRDs=true' cert-manager wire/cert-manager
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: config_ingress
    - name: install nginx-ingress-controller
      command: 'helm upgrade --install nginx-ingress-controller wire/nginx-ingress-controller --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: config_ingress
    - name: install nginx-ingress-services
      command: 'helm upgrade --install nginx-ingress-services wire/nginx-ingress-services -f my-nginx-ingress/values.yaml -f my-nginx-ingress/secrets.yaml -f my-nginx-ingress/values-override-cert-manager.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: config_ingress
