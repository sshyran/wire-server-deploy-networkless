- name: Check dependencies
  hosts: localhost
  gather_facts: no
  become: no
  tasks:
    - name: Verify Ansible version meets this playbook's requirements
      include: tasks/version_check.yml
      vars:
        ansible_min_version: 2.7.0
        ansible_max_version: 2.8.0
      tags: always

- name: Deploy kubernetes with ansible
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: deploy kubernetes
      shell: 'export PATH=$PATH:/home/ubuntu/.poetry/bin/ && poetry run ansible-playbook -i /home/ubuntu/hosts.ini kubernetes.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: deploy_k8s
    - name: create kubeadm configuration directory
      file:
        path: '/home/ubuntu/.kube'
        state: directory
      tags: deploy_k8s
    - name: copy kubeadm config
      copy:
        remote_src: True
        src: '/home/ubuntu/artifacts/admin.conf'
        dest: '/home/ubuntu/.kube/config'
      tags: deploy_k8s

- name: Deploy cassandra with ansible
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: deploy cassandra
      shell: 'export PATH=$PATH:/home/ubuntu/.poetry/bin/ && poetry run ansible-playbook -i /home/ubuntu/hosts.ini cassandra.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: deploy_cassandra

- name: Deploy elasticsearch with ansible
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: deploy elasticsearch
      shell: 'export PATH=$PATH:/home/ubuntu/.poetry/bin/ && poetry run ansible-playbook -i /home/ubuntu/hosts.ini elasticsearch.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: deploy_elasticsearch

- name: Deploy minio with ansible
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: deploy minio
      shell: 'export PATH=$PATH:/home/ubuntu/.poetry/bin/ && poetry run ansible-playbook -i /home/ubuntu/hosts.ini minio.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: deploy_minio

- name: Deploy wire-server with helm
  hosts: admin
  gather_facts: no
  become: no
  tasks:
    - name: Include helm version
      include_vars: 'group_vars/helm_version.yml'
      tags: deploy_helm3
    - name: grab helm3 installation tarball
      get_url:
        url: 'https://get.helm.sh/helm-{{ helm3_version }}-linux-amd64.tar.gz'
        dest: '/home/ubuntu/helm-{{ helm3_version }}-linux-amd64.tar.gz'
      tags: deploy_helm3
    - name: extract helm3 binary
      unarchive:
        remote_src: yes
        src: '/home/ubuntu/helm-{{ helm3_version }}-linux-amd64.tar.gz'
        dest: '/home/ubuntu/'
        creates: '/home/ubuntu/helm'
        extra_opts:
          - --strip=1
          - --wildcards
          - '*/helm'
      tags: deploy_helm3
    - name: copy helm3 binary into place
      become: yes
      copy:
        remote_src: True
        src: '/home/ubuntu/helm'
        dest: '/usr/local/bin/helm'
        mode: 755
      tags: deploy_helm3
    - name: download helm charts
      command: 'wget -r -l 10 --quiet https://helm.internal.vpc/charts/'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: gather_helm_charts
      ignore_errors: yes
    - name: move helm charts
      command: 'mv helm.{{ fake_domain }}/charts/ ./wire'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: gather_helm_charts
    - name: clean helm charts
      shell: 'rm $(find ./wire/ -name index*)'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: gather_helm_charts
    - name: run ansible script to populate values files.
      shell: 'export PATH=$PATH:/home/ubuntu/.poetry/bin/ && poetry run ansible-playbook -i /home/ubuntu/hosts.ini helm_external.yml -vv'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/ansible/'
      environment:
        CURL_CA_BUNDLE: '/etc/ssl/certs/ca-certificates.crt'
      tags: prepare_helm_values
    - name: install cassandra-external
      command: 'helm upgrade --install cassandra-external wire/cassandra-external -f values/cassandra-external/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_helm_chart_cassandra
    - name: install elasticsearch-external
      command: 'helm upgrade --install elasticsearch-external wire/elasticsearch-external -f values/elasticsearch-external/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_helm_chart_elasticsearch
    - name: install minio-external
      command: 'helm upgrade --install minio-external wire/minio-external -f values/minio-external/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_helm_chart_minio
## FUTUREWORK: look at the cassandra, redis, and elasticsearch groups, and fill this out dynamically.
    - name: create values file for databases-ephemeral
      copy:
        content: |
          tags:
            cassandra-ephemeral: false
            elasticsearch-ephemeral: false
        dest: /home/ubuntu/wire-server-deploy/values/databases-ephemeral/values.yaml
      tags: prepare_databases_ephemeral
    - name: install databases-ephemeral
      command: 'helm upgrade --install databases-ephemeral wire/databases-ephemeral -f values/databases-ephemeral/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_databases_ephemeral
    - name: configure fake-aws
      copy:
        dest: '/home/ubuntu/wire-server-deploy/values/fake-aws/values.yaml'
        src: '/home/ubuntu/wire-server-deploy/values/fake-aws/prod-values.example.yaml'
        remote_src: yes
      tags: prepare_fake_aws
    - name: install fake-aws
      command: 'helm upgrade --install fake-aws wire/fake-aws -f values/fake-aws/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_fake_aws
    - name: configure demo-smtp
      copy:
        dest: '/home/ubuntu/wire-server-deploy/values/demo-smtp/values.yaml'
        src: '/home/ubuntu/wire-server-deploy/values/demo-smtp/prod-values.example.yaml'
        remote_src: yes
      tags: prepare_demo_smtp
    - name: install demo-smtp
      command: 'helm upgrade --install demo-smtp wire/demo-smtp -f values/demo-smtp/values.yaml --wait'
      args:
        chdir: '/home/ubuntu/wire-server-deploy/'
      tags: deploy_demo_smtp